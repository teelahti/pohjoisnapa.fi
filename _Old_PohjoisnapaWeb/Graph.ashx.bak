<%@ WebHandler Language="C#" Class="Graph" %>

//using System;
//using System.Web;
//using Microsoft.Research.CommunityTechnologies.TimeSeriesChart;
//using System.Drawing;
//using System.Collections.Generic;
//using System.Data.SqlClient;
//using System.Globalization;
//using System.Configuration;

//public class Graph : IHttpHandler {

//        const int ChartSizeX = 740;
//        const int ChartSizeY = 400;
//        const string ChartLabelX = "";
//        const string ChartLabelY = "km / °C / m/s";
		
//        private int timeseriesesStyled = 0;

//        public void ProcessRequest(HttpContext context) {

//            String cacheKey = context.Request.CurrentExecutionFilePath;
//            Byte[] imageBytes = null;

//            // Check if the cache contains the graph.
//            //object cachedImageBytes = context.Cache.Get(cacheKey);
//            // HACK: remove
//            object cachedImageBytes = null;

//            if(cachedImageBytes != null) {
//                imageBytes = (Byte[]) cachedImageBytes;
//            }
//            else {
//                imageBytes = createGraph();

//                // Store it in the cache (to be expired after 30 minutes).
//                context.Cache.Add(cacheKey, imageBytes, null,
//                  DateTime.MaxValue, new TimeSpan(0, 30, 0),
//                  System.Web.Caching.CacheItemPriority.Low, null);
//            }

//            // Send back image.
//            context.Response.ContentType = "image/jpeg";
//            context.Response.Cache.SetCacheability(HttpCacheability.Public);
//            context.Response.BufferOutput = false;
//            context.Response.OutputStream.Write(imageBytes, 0, imageBytes.Length);
//        }

//        public bool IsReusable {
//            get {
//                return false;
//            }
//        }

//        private Byte[] createGraph() {
//            TimeSeriesChartGenerator chartGen = new TimeSeriesChartGenerator();

//            // Improve performance by turning off updating while the chart is being populated
//            chartGen.BeginUpdate();

//            PopulateTimeSeries(chartGen);

//            SetTimeSeriesChartAppearance(chartGen);

//            chartGen.EndUpdate();

//            // return Bytes of image
//            using (Bitmap bm = new Bitmap(ChartSizeX, ChartSizeY)) {
			
//                // Draw the chart onto bitmap
//                chartGen.Draw(bm);

//                // Save bitmap into memorystream to convert it to byte array								
//                using(System.IO.MemoryStream ms = new System.IO.MemoryStream()) {
//                    bm.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);

//                    return ms.ToArray();
//                }
//            }
//        }

//        #region Time series population

//        private void PopulateTimeSeries(TimeSeriesChartGenerator chart) {
//            if(chart == null)
//                throw new ArgumentNullException("chart", "Chart object is null, cannot draw time series into it.");

//            TimeSeries tsDistance = new TimeSeries();
//            TimeSeries tsTemperature = new TimeSeries();
//            TimeSeries tsWind = new TimeSeries();

//            using(SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["PohjoisnapaConnectionString"].ConnectionString)) {
//                conn.Open();
//                using(SqlCommand com = conn.CreateCommand()) {
//                    com.CommandType = System.Data.CommandType.StoredProcedure;
//                    com.CommandTimeout = 20;

//                    com.CommandText = "Diary.GetGraphData";

//                    SqlDataReader rs = com.ExecuteReader();

//                    DateTime date;
//                    decimal dist;
//                    decimal temp;
//                    decimal wind;
					
//                    while (rs.Read()) {
//                        date = rs.GetDateTime(0);
//                        dist = rs.IsDBNull(1) ? 0 : rs.GetDecimal(1);
//                        wind = rs.IsDBNull(2) ? 0 : rs.GetDecimal(2);
//                        temp = rs.IsDBNull(3) ? 0 : rs.GetDecimal(3);
						
//                        tsDistance.DataPoints.Add(date, (float) dist);
//                        tsTemperature.DataPoints.Add(date, (float) temp);
//                        tsWind.DataPoints.Add(date, (float) wind);
//                    }
//                }
//            }

//            // Set ts styles
//            SetTimeSeriesAppearance(tsDistance);
//            SetTimeSeriesAppearance(tsTemperature);
//            SetTimeSeriesAppearance(tsWind);

//            // Add time serieses to chart
//            chart.TimeSeries.Add(tsDistance);
//            chart.TimeSeries.Add(tsTemperature);
//            chart.TimeSeries.Add(tsWind);
//        }


//        #endregion

//        #region Time series appearance

//        private void SetTimeSeriesAppearance(TimeSeries ts) {
//            // default glyph style to none
//            ts.GlyphStyle = TimeSeriesGlyphStyle.None;

//            switch(timeseriesesStyled) {
//                case 0:
//                    ts.LineColor = ColorTranslator.FromHtml("#CC0000");
//                    break;
//                case 1:
//                    ts.LineColor = ColorTranslator.FromHtml("#99CCFF");
//                    break;
//                case 2:
//                    ts.LineColor = ColorTranslator.FromHtml("#CC9900");
//                    break;
//            }

//            timeseriesesStyled++;
//        }

//        private void SetTimeSeriesChartAppearance(TimeSeriesChartGenerator chartGen) {
//            Axes a = chartGen.Axes;
//            a.XAxis.Label = ChartLabelX;
//            a.YAxis.Label = ChartLabelY;

//            // Turn on/off gridlines.

//            a.XAxis.ShowMajorGridlines = true;
//            a.YAxis.ShowMajorGridlines = true;

//            //Set the color of the plot rectangle, which is the area within
//            //the chart's axes.
//            chartGen.PlotColor = ColorTranslator.FromHtml("#006699");
//            chartGen.BackColor = ColorTranslator.FromHtml("#006699");

//        }

//        #endregion

//    }
